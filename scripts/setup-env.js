#!/usr/bin/env node

/**
 * Environment Setup Helper Script
 *
 * This script helps you create your .env.local file
 * Run: node scripts/setup-env.js
 */

const fs = require("fs");
const path = require("path");
const readline = require("readline");

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

console.log("\nüöÄ Supabase Environment Setup\n");
console.log("This script will help you create your .env.local file.");
console.log("You can find your Supabase credentials at:");
console.log("https://app.supabase.com/project/_/settings/api\n");

const questions = [
  {
    key: "NEXT_PUBLIC_SUPABASE_URL",
    question: "Enter your Supabase Project URL: ",
    placeholder: "https://your-project-ref.supabase.co",
    validate: (value) =>
      value.startsWith("https://") && value.includes("supabase.co"),
  },
  {
    key: "NEXT_PUBLIC_SUPABASE_ANON_KEY",
    question: "Enter your Supabase Anon Key: ",
    placeholder: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
    validate: (value) => value.startsWith("eyJ"),
  },
  {
    key: "SUPABASE_SERVICE_ROLE_KEY",
    question:
      "Enter your Supabase Service Role Key (optional, press Enter to skip): ",
    placeholder: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
    optional: true,
    validate: (value) => !value || value.startsWith("eyJ"),
  },
];

const answers = {};

function askQuestion(index) {
  if (index >= questions.length) {
    createEnvFile();
    return;
  }

  const q = questions[index];

  rl.question(q.question, (answer) => {
    const trimmedAnswer = answer.trim();

    if (q.optional && !trimmedAnswer) {
      console.log("  ‚è≠Ô∏è  Skipped\n");
      askQuestion(index + 1);
      return;
    }

    if (!q.optional && !trimmedAnswer) {
      console.log("  ‚ùå This field is required!\n");
      askQuestion(index);
      return;
    }

    if (trimmedAnswer && !q.validate(trimmedAnswer)) {
      console.log(`  ‚ùå Invalid format. Expected: ${q.placeholder}\n`);
      askQuestion(index);
      return;
    }

    if (trimmedAnswer) {
      answers[q.key] = trimmedAnswer;
      console.log("  ‚úÖ Saved\n");
    }

    askQuestion(index + 1);
  });
}

function createEnvFile() {
  const envPath = path.join(__dirname, "..", ".env.local");

  // Check if file already exists
  if (fs.existsSync(envPath)) {
    rl.question(
      "\n‚ö†Ô∏è  .env.local already exists. Overwrite? (y/N): ",
      (answer) => {
        if (answer.toLowerCase() === "y" || answer.toLowerCase() === "yes") {
          writeEnvFile(envPath);
        } else {
          console.log("\n‚ùå Setup cancelled. Existing file preserved.");
          rl.close();
        }
      }
    );
  } else {
    writeEnvFile(envPath);
  }
}

function writeEnvFile(envPath) {
  const envContent = `# Supabase Configuration
# Generated by setup-env.js on ${new Date().toISOString()}

# Supabase Project URL
NEXT_PUBLIC_SUPABASE_URL=${answers.NEXT_PUBLIC_SUPABASE_URL}

# Supabase Anonymous/Public Key
NEXT_PUBLIC_SUPABASE_ANON_KEY=${answers.NEXT_PUBLIC_SUPABASE_ANON_KEY}

${
  answers.SUPABASE_SERVICE_ROLE_KEY
    ? `# Supabase Service Role Key (KEEP SECRET - Server-side only)
SUPABASE_SERVICE_ROLE_KEY=${answers.SUPABASE_SERVICE_ROLE_KEY}
`
    : "# Supabase Service Role Key (optional - uncomment to use)\n# SUPABASE_SERVICE_ROLE_KEY=your-service-role-key-here\n"
}
# Site Configuration
NEXT_PUBLIC_SITE_URL=http://localhost:3000

# Optional Features
NEXT_PUBLIC_ENABLE_ANALYTICS=false
`;

  fs.writeFileSync(envPath, envContent, "utf8");

  console.log("\n‚úÖ Success! .env.local file created!");
  console.log("\nNext steps:");
  console.log("1. Run: pnpm dev");
  console.log("2. Import your database schema (see docs/DATABASE_IMPORT.md)");
  console.log("3. Start building! üéâ\n");

  rl.close();
}

// Start the questionnaire
askQuestion(0);

